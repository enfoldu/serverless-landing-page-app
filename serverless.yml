service: ${file(env.json):domain.name}

frameworkVersion: ">=1.2.0 <2.0.0"

plugins:
  - serverless-s3-sync

custom:
  ## Root/apex/naked domain name only (ex: google.com, yahoo.net, wikipedia.org)
  domain: ${file(env.json):domain.name}.${file(env.json):domain.suffix}
#  stack: ${self:custom.domain}-${self:provider.stage}
  s3Sync:
    - bucketName: ${self:custom.domain}
#      bucketPrefix: assets/ # optional
      localDir: ${file(env.json):appDirectory}

provider:
  name: aws
  runtime: ${file(env.json):runtime}
  stage: ${file(env.json):stage}
  profile: ${file(env.json):profile}

resources:
  Resources:
    ## ################################################ [ S3 ]
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.domain}
        AccessControl: Private
    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3Bucket
        PolicyDocument:
          Statement:
            - Sid: "Grant a CloudFront Origin Identity access to support private content"
              Effect: Allow
              Principal:
                CanonicalUser:
                  Fn::GetAtt: [ CloudFrontOriginAccessIdentity, S3CanonicalUserId ]
              Action:
              - s3:GetObject
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: S3Bucket
                    - "/*"
    ## ################################################ [ CloudFront ]
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName:
                Fn::GetAtt: [ S3Bucket, DomainName ]
              ## An identifier for the origin which must be unique within the distribution
              Id:
                Ref: S3Bucket
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ""
                    - - "origin-access-identity/cloudfront/"
                      - Ref: CloudFrontOriginAccessIdentity
          Enabled: 'true'
          DefaultRootObject: "index.html"
          Aliases:
            - ${self:custom.domain}
            - Fn::Join:
                - "."
                - - "*"
                  - ${self:custom.domain}
          ## Since the Landing Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            ## The origin id defined above
            TargetOriginId:
              Ref: S3Bucket
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'true'
              Cookies:
                Forward: all
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            AcmCertificateArn:
              Ref: CertificateManagerCertificate
            SslSupportMethod: 'sni-only'
            MinimumProtocolVersion: 'TLSv1.1_2016'
    CloudFrontOriginAccessIdentity:
      Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'access-identity'
    ## ################################################ [ Amazon Certificate Manager ]
    CertificateManagerCertificate:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${self:custom.domain}
        ## Include all sub-domains with a wildcard (*.domain.com)
        SubjectAlternativeNames:
          - Fn::Join:
              - "."
              - - "*"
                - ${self:custom.domain}
    ## ################################################ [ Route 53 ]
    Route53RecordSetGroupSub:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName:
          Fn::Join:
            - ""
            - - ${self:custom.domain}
              - "."
        RecordSets:
          - Name:
              Fn::Join:
                - ""
                - - ${self:custom.domain}
                  - "."
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2
              DNSName:
                Fn::GetAtt: [ CloudFrontDistribution, DomainName ]
          - Name:
              Fn::Join:
                - ""
                - - Fn::Join:
                      - "."
                      - - "*"
                        - ${self:custom.domain}
                  - "."
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2
              DNSName:
                Fn::GetAtt: [ CloudFrontDistribution, DomainName ]